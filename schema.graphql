scalar Upload
input ArmyRelateToManyInput {
  create: [ArmyCreateInput]
  connect: [ArmyWhereUniqueInput]
  disconnect: [ArmyWhereUniqueInput]
  disconnectAll: Boolean
}

""" A keystone list """
type User {
  """
  This virtual field will be resolved in one of the following ways (in this order):
   1. Execution of 'labelResolver' set on the User List config, or
   2. As an alias to the field set on 'labelField' in the User List config, or
   3. As an alias to a 'name' field on the User List (if one exists), or
   4. As an alias to the 'id' field on the User List.
  """
  _label_: String
  id: ID!
  name: String
  email: String
  isAdmin: Boolean
  password_is_set: Boolean
  armies(where: ArmyWhereInput, search: String, sortBy: [SortArmiesBy!], orderBy: String, first: Int, skip: Int): [Army!]!
  _armiesMeta(where: ArmyWhereInput, search: String, sortBy: [SortArmiesBy!], orderBy: String, first: Int, skip: Int): _QueryMeta
}

input UserWhereInput {
  AND: [UserWhereInput]
  OR: [UserWhereInput]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  email: String
  email_not: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  email_i: String
  email_not_i: String
  email_contains_i: String
  email_not_contains_i: String
  email_starts_with_i: String
  email_not_starts_with_i: String
  email_ends_with_i: String
  email_not_ends_with_i: String
  email_in: [String]
  email_not_in: [String]
  isAdmin: Boolean
  isAdmin_not: Boolean
  password_is_set: Boolean
  """ condition must be true for all nodes """
  armies_every: ArmyWhereInput
  """ condition must be true for at least 1 node """
  armies_some: ArmyWhereInput
  """ condition must be false for all nodes """
  armies_none: ArmyWhereInput
}

input UserWhereUniqueInput {
  id: ID!
}

enum SortUsersBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  isAdmin_ASC
  isAdmin_DESC
  armies_ASC
  armies_DESC
}

input UserUpdateInput {
  name: String
  email: String
  isAdmin: Boolean
  password: String
  armies: ArmyRelateToManyInput
}

input UsersUpdateInput {
  id: ID!
  data: UserUpdateInput
}

input UserCreateInput {
  name: String
  email: String
  isAdmin: Boolean
  password: String
  armies: ArmyRelateToManyInput
}

input UsersCreateInput {
  data: UserCreateInput
}

input UnitRelateToManyInput {
  create: [UnitCreateInput]
  connect: [UnitWhereUniqueInput]
  disconnect: [UnitWhereUniqueInput]
  disconnectAll: Boolean
}

input UserRelateToOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  disconnectAll: Boolean
}

""" A keystone list """
type Army {
  """
  This virtual field will be resolved in one of the following ways (in this order):
   1. Execution of 'labelResolver' set on the Army List config, or
   2. As an alias to the field set on 'labelField' in the Army List config, or
   3. As an alias to a 'name' field on the Army List (if one exists), or
   4. As an alias to the 'id' field on the Army List.
  """
  _label_: String
  id: ID!
  name: String
  description: String
  armyRules: String
  faction: String
  units(where: UnitWhereInput, search: String, sortBy: [SortUnitsBy!], orderBy: String, first: Int, skip: Int): [Unit!]!
  _unitsMeta(where: UnitWhereInput, search: String, sortBy: [SortUnitsBy!], orderBy: String, first: Int, skip: Int): _QueryMeta
  owner: User
  primaryColor: String
  secondaryColor: String
  highlightColor: String
}

input ArmyWhereInput {
  AND: [ArmyWhereInput]
  OR: [ArmyWhereInput]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  description: String
  description_not: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  description_i: String
  description_not_i: String
  description_contains_i: String
  description_not_contains_i: String
  description_starts_with_i: String
  description_not_starts_with_i: String
  description_ends_with_i: String
  description_not_ends_with_i: String
  description_in: [String]
  description_not_in: [String]
  armyRules: String
  armyRules_not: String
  armyRules_contains: String
  armyRules_not_contains: String
  armyRules_starts_with: String
  armyRules_not_starts_with: String
  armyRules_ends_with: String
  armyRules_not_ends_with: String
  armyRules_i: String
  armyRules_not_i: String
  armyRules_contains_i: String
  armyRules_not_contains_i: String
  armyRules_starts_with_i: String
  armyRules_not_starts_with_i: String
  armyRules_ends_with_i: String
  armyRules_not_ends_with_i: String
  armyRules_in: [String]
  armyRules_not_in: [String]
  faction: String
  faction_not: String
  faction_in: [String]
  faction_not_in: [String]
  """ condition must be true for all nodes """
  units_every: UnitWhereInput
  """ condition must be true for at least 1 node """
  units_some: UnitWhereInput
  """ condition must be false for all nodes """
  units_none: UnitWhereInput
  owner: UserWhereInput
  owner_is_null: Boolean
  primaryColor: String
  primaryColor_not: String
  primaryColor_contains: String
  primaryColor_not_contains: String
  primaryColor_starts_with: String
  primaryColor_not_starts_with: String
  primaryColor_ends_with: String
  primaryColor_not_ends_with: String
  primaryColor_i: String
  primaryColor_not_i: String
  primaryColor_contains_i: String
  primaryColor_not_contains_i: String
  primaryColor_starts_with_i: String
  primaryColor_not_starts_with_i: String
  primaryColor_ends_with_i: String
  primaryColor_not_ends_with_i: String
  primaryColor_in: [String]
  primaryColor_not_in: [String]
  secondaryColor: String
  secondaryColor_not: String
  secondaryColor_contains: String
  secondaryColor_not_contains: String
  secondaryColor_starts_with: String
  secondaryColor_not_starts_with: String
  secondaryColor_ends_with: String
  secondaryColor_not_ends_with: String
  secondaryColor_i: String
  secondaryColor_not_i: String
  secondaryColor_contains_i: String
  secondaryColor_not_contains_i: String
  secondaryColor_starts_with_i: String
  secondaryColor_not_starts_with_i: String
  secondaryColor_ends_with_i: String
  secondaryColor_not_ends_with_i: String
  secondaryColor_in: [String]
  secondaryColor_not_in: [String]
  highlightColor: String
  highlightColor_not: String
  highlightColor_contains: String
  highlightColor_not_contains: String
  highlightColor_starts_with: String
  highlightColor_not_starts_with: String
  highlightColor_ends_with: String
  highlightColor_not_ends_with: String
  highlightColor_i: String
  highlightColor_not_i: String
  highlightColor_contains_i: String
  highlightColor_not_contains_i: String
  highlightColor_starts_with_i: String
  highlightColor_not_starts_with_i: String
  highlightColor_ends_with_i: String
  highlightColor_not_ends_with_i: String
  highlightColor_in: [String]
  highlightColor_not_in: [String]
}

input ArmyWhereUniqueInput {
  id: ID!
}

enum SortArmiesBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  armyRules_ASC
  armyRules_DESC
  faction_ASC
  faction_DESC
  units_ASC
  units_DESC
  owner_ASC
  owner_DESC
  primaryColor_ASC
  primaryColor_DESC
  secondaryColor_ASC
  secondaryColor_DESC
  highlightColor_ASC
  highlightColor_DESC
}

input ArmyUpdateInput {
  name: String
  description: String
  armyRules: String
  faction: String
  units: UnitRelateToManyInput
  owner: UserRelateToOneInput
  primaryColor: String
  secondaryColor: String
  highlightColor: String
}

input ArmiesUpdateInput {
  id: ID!
  data: ArmyUpdateInput
}

input ArmyCreateInput {
  name: String
  description: String
  armyRules: String
  faction: String
  units: UnitRelateToManyInput
  owner: UserRelateToOneInput
  primaryColor: String
  secondaryColor: String
  highlightColor: String
}

input ArmiesCreateInput {
  data: ArmyCreateInput
}

input ArmyRelateToOneInput {
  create: ArmyCreateInput
  connect: ArmyWhereUniqueInput
  disconnect: ArmyWhereUniqueInput
  disconnectAll: Boolean
}

""" A keystone list """
type Unit {
  """
  This virtual field will be resolved in one of the following ways (in this order):
   1. Execution of 'labelResolver' set on the Unit List config, or
   2. As an alias to the field set on 'labelField' in the Unit List config, or
   3. As an alias to a 'name' field on the Unit List (if one exists), or
   4. As an alias to the 'id' field on the Unit List.
  """
  _label_: String
  id: ID!
  name: String
  points: Int
  army: Army
  battleFieldRole: String
}

input UnitWhereInput {
  AND: [UnitWhereInput]
  OR: [UnitWhereInput]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  points: Int
  points_not: Int
  points_lt: Int
  points_lte: Int
  points_gt: Int
  points_gte: Int
  points_in: [Int]
  points_not_in: [Int]
  army: ArmyWhereInput
  army_is_null: Boolean
  battleFieldRole: String
  battleFieldRole_not: String
  battleFieldRole_in: [String]
  battleFieldRole_not_in: [String]
}

input UnitWhereUniqueInput {
  id: ID!
}

enum SortUnitsBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  points_ASC
  points_DESC
  army_ASC
  army_DESC
  battleFieldRole_ASC
  battleFieldRole_DESC
}

input UnitUpdateInput {
  name: String
  points: Int
  army: ArmyRelateToOneInput
  battleFieldRole: String
}

input UnitsUpdateInput {
  id: ID!
  data: UnitUpdateInput
}

input UnitCreateInput {
  name: String
  points: Int
  army: ArmyRelateToOneInput
  battleFieldRole: String
}

input UnitsCreateInput {
  data: UnitCreateInput
}

input BattleInfoRelateToOneInput {
  create: BattleInfoCreateInput
  connect: BattleInfoWhereUniqueInput
  disconnect: BattleInfoWhereUniqueInput
  disconnectAll: Boolean
}

enum BattleStatusType {
  planning
  inProgress
  completed
}

""" A keystone list """
type Battle {
  """
  This virtual field will be resolved in one of the following ways (in this order):
   1. Execution of 'labelResolver' set on the Battle List config, or
   2. As an alias to the field set on 'labelField' in the Battle List config, or
   3. As an alias to a 'name' field on the Battle List (if one exists), or
   4. As an alias to the 'id' field on the Battle List.
  """
  _label_: String
  id: ID!
  army1: BattleInfo
  army2: BattleInfo
  points: Int
  mission: String
  setupDescription: String
  description: String
  status: BattleStatusType
}

input BattleWhereInput {
  AND: [BattleWhereInput]
  OR: [BattleWhereInput]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  army1: BattleInfoWhereInput
  army1_is_null: Boolean
  army2: BattleInfoWhereInput
  army2_is_null: Boolean
  points: Int
  points_not: Int
  points_lt: Int
  points_lte: Int
  points_gt: Int
  points_gte: Int
  points_in: [Int]
  points_not_in: [Int]
  mission: String
  mission_not: String
  mission_contains: String
  mission_not_contains: String
  mission_starts_with: String
  mission_not_starts_with: String
  mission_ends_with: String
  mission_not_ends_with: String
  mission_i: String
  mission_not_i: String
  mission_contains_i: String
  mission_not_contains_i: String
  mission_starts_with_i: String
  mission_not_starts_with_i: String
  mission_ends_with_i: String
  mission_not_ends_with_i: String
  mission_in: [String]
  mission_not_in: [String]
  setupDescription: String
  setupDescription_not: String
  setupDescription_contains: String
  setupDescription_not_contains: String
  setupDescription_starts_with: String
  setupDescription_not_starts_with: String
  setupDescription_ends_with: String
  setupDescription_not_ends_with: String
  setupDescription_i: String
  setupDescription_not_i: String
  setupDescription_contains_i: String
  setupDescription_not_contains_i: String
  setupDescription_starts_with_i: String
  setupDescription_not_starts_with_i: String
  setupDescription_ends_with_i: String
  setupDescription_not_ends_with_i: String
  setupDescription_in: [String]
  setupDescription_not_in: [String]
  description: String
  description_not: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  description_i: String
  description_not_i: String
  description_contains_i: String
  description_not_contains_i: String
  description_starts_with_i: String
  description_not_starts_with_i: String
  description_ends_with_i: String
  description_not_ends_with_i: String
  description_in: [String]
  description_not_in: [String]
  status: BattleStatusType
  status_not: BattleStatusType
  status_in: [BattleStatusType]
  status_not_in: [BattleStatusType]
}

input BattleWhereUniqueInput {
  id: ID!
}

enum SortBattlesBy {
  id_ASC
  id_DESC
  army1_ASC
  army1_DESC
  army2_ASC
  army2_DESC
  points_ASC
  points_DESC
  mission_ASC
  mission_DESC
  setupDescription_ASC
  setupDescription_DESC
  description_ASC
  description_DESC
  status_ASC
  status_DESC
}

input BattleUpdateInput {
  army1: BattleInfoRelateToOneInput
  army2: BattleInfoRelateToOneInput
  points: Int
  mission: String
  setupDescription: String
  description: String
  status: BattleStatusType
}

input BattlesUpdateInput {
  id: ID!
  data: BattleUpdateInput
}

input BattleCreateInput {
  army1: BattleInfoRelateToOneInput
  army2: BattleInfoRelateToOneInput
  points: Int
  mission: String
  setupDescription: String
  description: String
  status: BattleStatusType
}

input BattlesCreateInput {
  data: BattleCreateInput
}

input ObjectiveRelateToOneInput {
  create: ObjectiveCreateInput
  connect: ObjectiveWhereUniqueInput
  disconnect: ObjectiveWhereUniqueInput
  disconnectAll: Boolean
}

input ObjectiveRelateToManyInput {
  create: [ObjectiveCreateInput]
  connect: [ObjectiveWhereUniqueInput]
  disconnect: [ObjectiveWhereUniqueInput]
  disconnectAll: Boolean
}

""" A keystone list """
type BattleInfo {
  """
  This virtual field will be resolved in one of the following ways (in this order):
   1. Execution of 'labelResolver' set on the BattleInfo List config, or
   2. As an alias to the field set on 'labelField' in the BattleInfo List config, or
   3. As an alias to a 'name' field on the BattleInfo List (if one exists), or
   4. As an alias to the 'id' field on the BattleInfo List.
  """
  _label_: String
  id: ID!
  army: Army
  primary: Objective
  secondaries(where: ObjectiveWhereInput, search: String, sortBy: [SortObjectivesBy!], orderBy: String, first: Int, skip: Int): [Objective!]!
  _secondariesMeta(where: ObjectiveWhereInput, search: String, sortBy: [SortObjectivesBy!], orderBy: String, first: Int, skip: Int): _QueryMeta
  notes: String
}

input BattleInfoWhereInput {
  AND: [BattleInfoWhereInput]
  OR: [BattleInfoWhereInput]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  army: ArmyWhereInput
  army_is_null: Boolean
  primary: ObjectiveWhereInput
  primary_is_null: Boolean
  """ condition must be true for all nodes """
  secondaries_every: ObjectiveWhereInput
  """ condition must be true for at least 1 node """
  secondaries_some: ObjectiveWhereInput
  """ condition must be false for all nodes """
  secondaries_none: ObjectiveWhereInput
  notes: String
  notes_not: String
  notes_contains: String
  notes_not_contains: String
  notes_starts_with: String
  notes_not_starts_with: String
  notes_ends_with: String
  notes_not_ends_with: String
  notes_i: String
  notes_not_i: String
  notes_contains_i: String
  notes_not_contains_i: String
  notes_starts_with_i: String
  notes_not_starts_with_i: String
  notes_ends_with_i: String
  notes_not_ends_with_i: String
  notes_in: [String]
  notes_not_in: [String]
}

input BattleInfoWhereUniqueInput {
  id: ID!
}

enum SortBattleInfosBy {
  id_ASC
  id_DESC
  army_ASC
  army_DESC
  primary_ASC
  primary_DESC
  secondaries_ASC
  secondaries_DESC
  notes_ASC
  notes_DESC
}

input BattleInfoUpdateInput {
  army: ArmyRelateToOneInput
  primary: ObjectiveRelateToOneInput
  secondaries: ObjectiveRelateToManyInput
  notes: String
}

input BattleInfosUpdateInput {
  id: ID!
  data: BattleInfoUpdateInput
}

input BattleInfoCreateInput {
  army: ArmyRelateToOneInput
  primary: ObjectiveRelateToOneInput
  secondaries: ObjectiveRelateToManyInput
  notes: String
}

input BattleInfosCreateInput {
  data: BattleInfoCreateInput
}

enum MissionForceSizeType {
  combatPatrol
  incursion
  strikeForce
  onslaught
}

""" A keystone list """
type Mission {
  """
  This virtual field will be resolved in one of the following ways (in this order):
   1. Execution of 'labelResolver' set on the Mission List config, or
   2. As an alias to the field set on 'labelField' in the Mission List config, or
   3. As an alias to a 'name' field on the Mission List (if one exists), or
   4. As an alias to the 'id' field on the Mission List.
  """
  _label_: String
  id: ID!
  name: String
  source: String
  briefing: String
  forceSize: MissionForceSizeType
  rules: String
  primary: Objective
  secondaries(where: ObjectiveWhereInput, search: String, sortBy: [SortObjectivesBy!], orderBy: String, first: Int, skip: Int): [Objective!]!
  _secondariesMeta(where: ObjectiveWhereInput, search: String, sortBy: [SortObjectivesBy!], orderBy: String, first: Int, skip: Int): _QueryMeta
}

input MissionWhereInput {
  AND: [MissionWhereInput]
  OR: [MissionWhereInput]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  source: String
  source_not: String
  source_contains: String
  source_not_contains: String
  source_starts_with: String
  source_not_starts_with: String
  source_ends_with: String
  source_not_ends_with: String
  source_i: String
  source_not_i: String
  source_contains_i: String
  source_not_contains_i: String
  source_starts_with_i: String
  source_not_starts_with_i: String
  source_ends_with_i: String
  source_not_ends_with_i: String
  source_in: [String]
  source_not_in: [String]
  briefing: String
  briefing_not: String
  briefing_contains: String
  briefing_not_contains: String
  briefing_starts_with: String
  briefing_not_starts_with: String
  briefing_ends_with: String
  briefing_not_ends_with: String
  briefing_i: String
  briefing_not_i: String
  briefing_contains_i: String
  briefing_not_contains_i: String
  briefing_starts_with_i: String
  briefing_not_starts_with_i: String
  briefing_ends_with_i: String
  briefing_not_ends_with_i: String
  briefing_in: [String]
  briefing_not_in: [String]
  forceSize: MissionForceSizeType
  forceSize_not: MissionForceSizeType
  forceSize_in: [MissionForceSizeType]
  forceSize_not_in: [MissionForceSizeType]
  rules: String
  rules_not: String
  rules_contains: String
  rules_not_contains: String
  rules_starts_with: String
  rules_not_starts_with: String
  rules_ends_with: String
  rules_not_ends_with: String
  rules_i: String
  rules_not_i: String
  rules_contains_i: String
  rules_not_contains_i: String
  rules_starts_with_i: String
  rules_not_starts_with_i: String
  rules_ends_with_i: String
  rules_not_ends_with_i: String
  rules_in: [String]
  rules_not_in: [String]
  primary: ObjectiveWhereInput
  primary_is_null: Boolean
  """ condition must be true for all nodes """
  secondaries_every: ObjectiveWhereInput
  """ condition must be true for at least 1 node """
  secondaries_some: ObjectiveWhereInput
  """ condition must be false for all nodes """
  secondaries_none: ObjectiveWhereInput
}

input MissionWhereUniqueInput {
  id: ID!
}

enum SortMissionsBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  source_ASC
  source_DESC
  briefing_ASC
  briefing_DESC
  forceSize_ASC
  forceSize_DESC
  rules_ASC
  rules_DESC
  primary_ASC
  primary_DESC
  secondaries_ASC
  secondaries_DESC
}

input MissionUpdateInput {
  name: String
  source: String
  briefing: String
  forceSize: MissionForceSizeType
  rules: String
  primary: ObjectiveRelateToOneInput
  secondaries: ObjectiveRelateToManyInput
}

input MissionsUpdateInput {
  id: ID!
  data: MissionUpdateInput
}

input MissionCreateInput {
  name: String
  source: String
  briefing: String
  forceSize: MissionForceSizeType
  rules: String
  primary: ObjectiveRelateToOneInput
  secondaries: ObjectiveRelateToManyInput
}

input MissionsCreateInput {
  data: MissionCreateInput
}

""" A keystone list """
type Objective {
  """
  This virtual field will be resolved in one of the following ways (in this order):
   1. Execution of 'labelResolver' set on the Objective List config, or
   2. As an alias to the field set on 'labelField' in the Objective List config, or
   3. As an alias to a 'name' field on the Objective List (if one exists), or
   4. As an alias to the 'id' field on the Objective List.
  """
  _label_: String
  id: ID!
  name: String
  score: Int
  rules: String
}

input ObjectiveWhereInput {
  AND: [ObjectiveWhereInput]
  OR: [ObjectiveWhereInput]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  score: Int
  score_not: Int
  score_lt: Int
  score_lte: Int
  score_gt: Int
  score_gte: Int
  score_in: [Int]
  score_not_in: [Int]
  rules: String
  rules_not: String
  rules_contains: String
  rules_not_contains: String
  rules_starts_with: String
  rules_not_starts_with: String
  rules_ends_with: String
  rules_not_ends_with: String
  rules_i: String
  rules_not_i: String
  rules_contains_i: String
  rules_not_contains_i: String
  rules_starts_with_i: String
  rules_not_starts_with_i: String
  rules_ends_with_i: String
  rules_not_ends_with_i: String
  rules_in: [String]
  rules_not_in: [String]
}

input ObjectiveWhereUniqueInput {
  id: ID!
}

enum SortObjectivesBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  score_ASC
  score_DESC
  rules_ASC
  rules_DESC
}

input ObjectiveUpdateInput {
  name: String
  score: Int
  rules: String
}

input ObjectivesUpdateInput {
  id: ID!
  data: ObjectiveUpdateInput
}

input ObjectiveCreateInput {
  name: String
  score: Int
  rules: String
}

input ObjectivesCreateInput {
  data: ObjectiveCreateInput
}

input BattlefieldRelateToManyInput {
  create: [BattlefieldCreateInput]
  connect: [BattlefieldWhereUniqueInput]
  disconnect: [BattlefieldWhereUniqueInput]
  disconnectAll: Boolean
}

""" A keystone list """
type Planet {
  """
  This virtual field will be resolved in one of the following ways (in this order):
   1. Execution of 'labelResolver' set on the Planet List config, or
   2. As an alias to the field set on 'labelField' in the Planet List config, or
   3. As an alias to a 'name' field on the Planet List (if one exists), or
   4. As an alias to the 'id' field on the Planet List.
  """
  _label_: String
  id: ID!
  name: String
  battlefields(where: BattlefieldWhereInput, search: String, sortBy: [SortBattlefieldsBy!], orderBy: String, first: Int, skip: Int): [Battlefield!]!
  _battlefieldsMeta(where: BattlefieldWhereInput, search: String, sortBy: [SortBattlefieldsBy!], orderBy: String, first: Int, skip: Int): _QueryMeta
}

input PlanetWhereInput {
  AND: [PlanetWhereInput]
  OR: [PlanetWhereInput]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  """ condition must be true for all nodes """
  battlefields_every: BattlefieldWhereInput
  """ condition must be true for at least 1 node """
  battlefields_some: BattlefieldWhereInput
  """ condition must be false for all nodes """
  battlefields_none: BattlefieldWhereInput
}

input PlanetWhereUniqueInput {
  id: ID!
}

enum SortPlanetsBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  battlefields_ASC
  battlefields_DESC
}

input PlanetUpdateInput {
  name: String
  battlefields: BattlefieldRelateToManyInput
}

input PlanetsUpdateInput {
  id: ID!
  data: PlanetUpdateInput
}

input PlanetCreateInput {
  name: String
  battlefields: BattlefieldRelateToManyInput
}

input PlanetsCreateInput {
  data: PlanetCreateInput
}

input BattleRelateToManyInput {
  create: [BattleCreateInput]
  connect: [BattleWhereUniqueInput]
  disconnect: [BattleWhereUniqueInput]
  disconnectAll: Boolean
}

""" A keystone list """
type Battlefield {
  """
  This virtual field will be resolved in one of the following ways (in this order):
   1. Execution of 'labelResolver' set on the Battlefield List config, or
   2. As an alias to the field set on 'labelField' in the Battlefield List config, or
   3. As an alias to a 'name' field on the Battlefield List (if one exists), or
   4. As an alias to the 'id' field on the Battlefield List.
  """
  _label_: String
  id: ID!
  gridReference: String
  controller: Army
  battles(where: BattleWhereInput, search: String, sortBy: [SortBattlesBy!], orderBy: String, first: Int, skip: Int): [Battle!]!
  _battlesMeta(where: BattleWhereInput, search: String, sortBy: [SortBattlesBy!], orderBy: String, first: Int, skip: Int): _QueryMeta
}

input BattlefieldWhereInput {
  AND: [BattlefieldWhereInput]
  OR: [BattlefieldWhereInput]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  gridReference: String
  gridReference_not: String
  gridReference_contains: String
  gridReference_not_contains: String
  gridReference_starts_with: String
  gridReference_not_starts_with: String
  gridReference_ends_with: String
  gridReference_not_ends_with: String
  gridReference_i: String
  gridReference_not_i: String
  gridReference_contains_i: String
  gridReference_not_contains_i: String
  gridReference_starts_with_i: String
  gridReference_not_starts_with_i: String
  gridReference_ends_with_i: String
  gridReference_not_ends_with_i: String
  gridReference_in: [String]
  gridReference_not_in: [String]
  controller: ArmyWhereInput
  controller_is_null: Boolean
  """ condition must be true for all nodes """
  battles_every: BattleWhereInput
  """ condition must be true for at least 1 node """
  battles_some: BattleWhereInput
  """ condition must be false for all nodes """
  battles_none: BattleWhereInput
}

input BattlefieldWhereUniqueInput {
  id: ID!
}

enum SortBattlefieldsBy {
  id_ASC
  id_DESC
  gridReference_ASC
  gridReference_DESC
  controller_ASC
  controller_DESC
  battles_ASC
  battles_DESC
}

input BattlefieldUpdateInput {
  gridReference: String
  controller: ArmyRelateToOneInput
  battles: BattleRelateToManyInput
}

input BattlefieldsUpdateInput {
  id: ID!
  data: BattlefieldUpdateInput
}

input BattlefieldCreateInput {
  gridReference: String
  controller: ArmyRelateToOneInput
  battles: BattleRelateToManyInput
}

input BattlefieldsCreateInput {
  data: BattlefieldCreateInput
}

"""
NOTE: Can be JSON, or a Boolean/Int/String
Why not a union? GraphQL doesn't support a union including a scalar
(https://github.com/facebook/graphql/issues/215)
"""
scalar JSON

type _ListAccess {
  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'create' operations.
  NOTE: 'create' can only return a Boolean.
  It is not possible to specify a declarative Where clause for this
  operation
  """
  create: Boolean
  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'read' operations.
  """
  read: JSON
  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'update' operations.
  """
  update: JSON
  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'delete' operations.
  """
  delete: JSON
  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'auth' operations.
  """
  auth: JSON
}

type _ListQueries {
  "Single-item query name"
  item: String
  "All-items query name"
  list: String
  "List metadata query name"
  meta: String
}

type _ListMutations {
  "Create mutation name"
  create: String
  "Create many mutation name"
  createMany: String
  "Update mutation name"
  update: String
  "Update many mutation name"
  updateMany: String
  "Delete mutation name"
  delete: String
  "Delete many mutation name"
  deleteMany: String
}

type _ListInputTypes {
  "Input type for matching multiple items"
  whereInput: String
  "Input type for matching a unique item"
  whereUniqueInput: String
  "Create mutation input type name"
  createInput: String
  "Create many mutation input type name"
  createManyInput: String
  "Update mutation name input"
  updateInput: String
  "Update many mutation name input"
  updateManyInput: String
}

type _ListSchemaFields {
  "The path of the field in its list"
  path: String
  "The name of the field in its list"
  name: String @deprecated(reason: "Use `path` instead")
  "The field type (ie, Checkbox, Text, etc)"
  type: String
}

type _ListSchemaRelatedFields {
  "The typename as used in GraphQL queries"
  type: String
  "A list of GraphQL field names"
  fields: [String]
}

type _ListSchema {
  "The typename as used in GraphQL queries"
  type: String
  """
  Top level GraphQL query names which either return this type, or
  provide aggregate information about this type
  """
  queries: _ListQueries
  "Top-level GraphQL mutation names"
  mutations: _ListMutations
  "Top-level GraphQL input types"
  inputTypes: _ListInputTypes
  "Information about fields defined on this list"
  fields(where: _ListSchemaFieldsInput): [_ListSchemaFields]
  """
  Information about fields on other types which return this type, or
  provide aggregate information about this type
  """
  relatedFields: [_ListSchemaRelatedFields]
}

type _ListMeta {
  "The Keystone list key"
  key: String
  "The Keystone List name"
  name: String @deprecated(reason: "Use `key` instead")
  "The list's user-facing description"
  description: String
  "The list's display name in the Admin UI"
  label: String
  "The list's singular display name"
  singular: String
  "The list's plural display name"
  plural: String
  "The list's data path"
  path: String
  "Access control configuration for the currently authenticated request"
  access: _ListAccess
  "Information on the generated GraphQL schema"
  schema: _ListSchema
}

type _QueryMeta {
  count: Int
}

input _ksListsMetaInput {
  key: String
  "Whether this is an auxiliary helper list"
  auxiliary: Boolean
}

input _ListSchemaFieldsInput {
  type: String
}

type unauthenticateUserOutput {
  """
  `true` when unauthentication succeeds.
  NOTE: unauthentication always succeeds when the request has an invalid or missing authentication token.
  """
  success: Boolean
}

type authenticateUserOutput {
  """ Used to make subsequent authenticated requests by setting this token in a header: 'Authorization: Bearer <token>'. """
  token: String
  """ Retrieve information on the newly authenticated User here. """
  item: User
}

type Query {
  """ Search for all User items which match the where clause. """
  allUsers(where: UserWhereInput, search: String, sortBy: [SortUsersBy!], orderBy: String, first: Int, skip: Int): [User]
  """ Search for the User item with the matching ID. """
  User(where: UserWhereUniqueInput!): User
  """ Perform a meta-query on all User items which match the where clause. """
  _allUsersMeta(where: UserWhereInput, search: String, sortBy: [SortUsersBy!], orderBy: String, first: Int, skip: Int): _QueryMeta
  """ Retrieve the meta-data for the User list. """
  _UsersMeta: _ListMeta
  """ Search for all Army items which match the where clause. """
  allArmies(where: ArmyWhereInput, search: String, sortBy: [SortArmiesBy!], orderBy: String, first: Int, skip: Int): [Army]
  """ Search for the Army item with the matching ID. """
  Army(where: ArmyWhereUniqueInput!): Army
  """ Perform a meta-query on all Army items which match the where clause. """
  _allArmiesMeta(where: ArmyWhereInput, search: String, sortBy: [SortArmiesBy!], orderBy: String, first: Int, skip: Int): _QueryMeta
  """ Retrieve the meta-data for the Army list. """
  _ArmiesMeta: _ListMeta
  """ Search for all Unit items which match the where clause. """
  allUnits(where: UnitWhereInput, search: String, sortBy: [SortUnitsBy!], orderBy: String, first: Int, skip: Int): [Unit]
  """ Search for the Unit item with the matching ID. """
  Unit(where: UnitWhereUniqueInput!): Unit
  """ Perform a meta-query on all Unit items which match the where clause. """
  _allUnitsMeta(where: UnitWhereInput, search: String, sortBy: [SortUnitsBy!], orderBy: String, first: Int, skip: Int): _QueryMeta
  """ Retrieve the meta-data for the Unit list. """
  _UnitsMeta: _ListMeta
  """ Search for all Battle items which match the where clause. """
  allBattles(where: BattleWhereInput, search: String, sortBy: [SortBattlesBy!], orderBy: String, first: Int, skip: Int): [Battle]
  """ Search for the Battle item with the matching ID. """
  Battle(where: BattleWhereUniqueInput!): Battle
  """ Perform a meta-query on all Battle items which match the where clause. """
  _allBattlesMeta(where: BattleWhereInput, search: String, sortBy: [SortBattlesBy!], orderBy: String, first: Int, skip: Int): _QueryMeta
  """ Retrieve the meta-data for the Battle list. """
  _BattlesMeta: _ListMeta
  """ Search for all BattleInfo items which match the where clause. """
  allBattleInfos(where: BattleInfoWhereInput, search: String, sortBy: [SortBattleInfosBy!], orderBy: String, first: Int, skip: Int): [BattleInfo]
  """ Search for the BattleInfo item with the matching ID. """
  BattleInfo(where: BattleInfoWhereUniqueInput!): BattleInfo
  """ Perform a meta-query on all BattleInfo items which match the where clause. """
  _allBattleInfosMeta(where: BattleInfoWhereInput, search: String, sortBy: [SortBattleInfosBy!], orderBy: String, first: Int, skip: Int): _QueryMeta
  """ Retrieve the meta-data for the BattleInfo list. """
  _BattleInfosMeta: _ListMeta
  """ Search for all Mission items which match the where clause. """
  allMissions(where: MissionWhereInput, search: String, sortBy: [SortMissionsBy!], orderBy: String, first: Int, skip: Int): [Mission]
  """ Search for the Mission item with the matching ID. """
  Mission(where: MissionWhereUniqueInput!): Mission
  """ Perform a meta-query on all Mission items which match the where clause. """
  _allMissionsMeta(where: MissionWhereInput, search: String, sortBy: [SortMissionsBy!], orderBy: String, first: Int, skip: Int): _QueryMeta
  """ Retrieve the meta-data for the Mission list. """
  _MissionsMeta: _ListMeta
  """ Search for all Objective items which match the where clause. """
  allObjectives(where: ObjectiveWhereInput, search: String, sortBy: [SortObjectivesBy!], orderBy: String, first: Int, skip: Int): [Objective]
  """ Search for the Objective item with the matching ID. """
  Objective(where: ObjectiveWhereUniqueInput!): Objective
  """ Perform a meta-query on all Objective items which match the where clause. """
  _allObjectivesMeta(where: ObjectiveWhereInput, search: String, sortBy: [SortObjectivesBy!], orderBy: String, first: Int, skip: Int): _QueryMeta
  """ Retrieve the meta-data for the Objective list. """
  _ObjectivesMeta: _ListMeta
  """ Search for all Planet items which match the where clause. """
  allPlanets(where: PlanetWhereInput, search: String, sortBy: [SortPlanetsBy!], orderBy: String, first: Int, skip: Int): [Planet]
  """ Search for the Planet item with the matching ID. """
  Planet(where: PlanetWhereUniqueInput!): Planet
  """ Perform a meta-query on all Planet items which match the where clause. """
  _allPlanetsMeta(where: PlanetWhereInput, search: String, sortBy: [SortPlanetsBy!], orderBy: String, first: Int, skip: Int): _QueryMeta
  """ Retrieve the meta-data for the Planet list. """
  _PlanetsMeta: _ListMeta
  """ Search for all Battlefield items which match the where clause. """
  allBattlefields(where: BattlefieldWhereInput, search: String, sortBy: [SortBattlefieldsBy!], orderBy: String, first: Int, skip: Int): [Battlefield]
  """ Search for the Battlefield item with the matching ID. """
  Battlefield(where: BattlefieldWhereUniqueInput!): Battlefield
  """ Perform a meta-query on all Battlefield items which match the where clause. """
  _allBattlefieldsMeta(where: BattlefieldWhereInput, search: String, sortBy: [SortBattlefieldsBy!], orderBy: String, first: Int, skip: Int): _QueryMeta
  """ Retrieve the meta-data for the Battlefield list. """
  _BattlefieldsMeta: _ListMeta
  """ Retrieve the meta-data for all lists. """
  _ksListsMeta(where: _ksListsMetaInput): [_ListMeta]
  """The version of the Keystone application serving this API."""
  appVersion: String
  authenticatedUser: User
}

type Mutation {
  """ Create a single User item. """
  createUser(data: UserCreateInput): User
  """ Create multiple User items. """
  createUsers(data: [UsersCreateInput]): [User]
  """ Update a single User item by ID. """
  updateUser(id: ID!, data: UserUpdateInput): User
  """ Update multiple User items by ID. """
  updateUsers(data: [UsersUpdateInput]): [User]
  """ Delete a single User item by ID. """
  deleteUser(id: ID!): User
  """ Delete multiple User items by ID. """
  deleteUsers(ids: [ID!]): [User]
  """ Create a single Army item. """
  createArmy(data: ArmyCreateInput): Army
  """ Create multiple Army items. """
  createArmies(data: [ArmiesCreateInput]): [Army]
  """ Update a single Army item by ID. """
  updateArmy(id: ID!, data: ArmyUpdateInput): Army
  """ Update multiple Army items by ID. """
  updateArmies(data: [ArmiesUpdateInput]): [Army]
  """ Delete a single Army item by ID. """
  deleteArmy(id: ID!): Army
  """ Delete multiple Army items by ID. """
  deleteArmies(ids: [ID!]): [Army]
  """ Create a single Unit item. """
  createUnit(data: UnitCreateInput): Unit
  """ Create multiple Unit items. """
  createUnits(data: [UnitsCreateInput]): [Unit]
  """ Update a single Unit item by ID. """
  updateUnit(id: ID!, data: UnitUpdateInput): Unit
  """ Update multiple Unit items by ID. """
  updateUnits(data: [UnitsUpdateInput]): [Unit]
  """ Delete a single Unit item by ID. """
  deleteUnit(id: ID!): Unit
  """ Delete multiple Unit items by ID. """
  deleteUnits(ids: [ID!]): [Unit]
  """ Create a single Battle item. """
  createBattle(data: BattleCreateInput): Battle
  """ Create multiple Battle items. """
  createBattles(data: [BattlesCreateInput]): [Battle]
  """ Update a single Battle item by ID. """
  updateBattle(id: ID!, data: BattleUpdateInput): Battle
  """ Update multiple Battle items by ID. """
  updateBattles(data: [BattlesUpdateInput]): [Battle]
  """ Delete a single Battle item by ID. """
  deleteBattle(id: ID!): Battle
  """ Delete multiple Battle items by ID. """
  deleteBattles(ids: [ID!]): [Battle]
  """ Create a single BattleInfo item. """
  createBattleInfo(data: BattleInfoCreateInput): BattleInfo
  """ Create multiple BattleInfo items. """
  createBattleInfos(data: [BattleInfosCreateInput]): [BattleInfo]
  """ Update a single BattleInfo item by ID. """
  updateBattleInfo(id: ID!, data: BattleInfoUpdateInput): BattleInfo
  """ Update multiple BattleInfo items by ID. """
  updateBattleInfos(data: [BattleInfosUpdateInput]): [BattleInfo]
  """ Delete a single BattleInfo item by ID. """
  deleteBattleInfo(id: ID!): BattleInfo
  """ Delete multiple BattleInfo items by ID. """
  deleteBattleInfos(ids: [ID!]): [BattleInfo]
  """ Create a single Mission item. """
  createMission(data: MissionCreateInput): Mission
  """ Create multiple Mission items. """
  createMissions(data: [MissionsCreateInput]): [Mission]
  """ Update a single Mission item by ID. """
  updateMission(id: ID!, data: MissionUpdateInput): Mission
  """ Update multiple Mission items by ID. """
  updateMissions(data: [MissionsUpdateInput]): [Mission]
  """ Delete a single Mission item by ID. """
  deleteMission(id: ID!): Mission
  """ Delete multiple Mission items by ID. """
  deleteMissions(ids: [ID!]): [Mission]
  """ Create a single Objective item. """
  createObjective(data: ObjectiveCreateInput): Objective
  """ Create multiple Objective items. """
  createObjectives(data: [ObjectivesCreateInput]): [Objective]
  """ Update a single Objective item by ID. """
  updateObjective(id: ID!, data: ObjectiveUpdateInput): Objective
  """ Update multiple Objective items by ID. """
  updateObjectives(data: [ObjectivesUpdateInput]): [Objective]
  """ Delete a single Objective item by ID. """
  deleteObjective(id: ID!): Objective
  """ Delete multiple Objective items by ID. """
  deleteObjectives(ids: [ID!]): [Objective]
  """ Create a single Planet item. """
  createPlanet(data: PlanetCreateInput): Planet
  """ Create multiple Planet items. """
  createPlanets(data: [PlanetsCreateInput]): [Planet]
  """ Update a single Planet item by ID. """
  updatePlanet(id: ID!, data: PlanetUpdateInput): Planet
  """ Update multiple Planet items by ID. """
  updatePlanets(data: [PlanetsUpdateInput]): [Planet]
  """ Delete a single Planet item by ID. """
  deletePlanet(id: ID!): Planet
  """ Delete multiple Planet items by ID. """
  deletePlanets(ids: [ID!]): [Planet]
  """ Create a single Battlefield item. """
  createBattlefield(data: BattlefieldCreateInput): Battlefield
  """ Create multiple Battlefield items. """
  createBattlefields(data: [BattlefieldsCreateInput]): [Battlefield]
  """ Update a single Battlefield item by ID. """
  updateBattlefield(id: ID!, data: BattlefieldUpdateInput): Battlefield
  """ Update multiple Battlefield items by ID. """
  updateBattlefields(data: [BattlefieldsUpdateInput]): [Battlefield]
  """ Delete a single Battlefield item by ID. """
  deleteBattlefield(id: ID!): Battlefield
  """ Delete multiple Battlefield items by ID. """
  deleteBattlefields(ids: [ID!]): [Battlefield]
  """ Authenticate and generate a token for a User with the Password Authentication Strategy. """
  authenticateUserWithPassword(email: String, password: String): authenticateUserOutput
  unauthenticateUser: unauthenticateUserOutput
  updateAuthenticatedUser(data: UserUpdateInput): User
}
